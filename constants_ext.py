from constants import *

COMPRESSED_SETS = [
    "C",
    "Zcf",
    "Zcd",
    "Zca",
    "Zce",
    "Zvb",
    "Zcmp",
    "Zcmt",
    "Zc"
]

SUPPORTED_EXTENSIONS = [
    "I",
    "A", 
    "B", 
    "C", 
    "D", 
    "F", 
    "E", 
    "M", 
    "Smaia", 
    "Smcdeleg", 
    "Smcsrind", 
    "Smepmp", 
    "Ssaia", 
    "Ssccfg",
    "Sscsrind",
    "Svpbmt",
    "V",
    "Za128rs",
    "Za64rs",
    "Zabha",
    "Zacas",
    "Zama16b",
    "Zba",
    "Zbb",
    "Zbc",
    "Zbkb",
    "Zbkc",
    "Zbkx",
    "Zbs",
    "Zca",
    "Zcb",
    "Zcd",
    "Zcf",
    "Zcmop",
    "Zcmp",
    "Zdinx",
    "Zfa",
    "Zfh",
    "Zfhmin",
    "Zfinx",
    "Zhinx",
    "Zhinxmin",
    "Zic64b",
    "Zicbop",
    "Ziccamoa",
    "Ziccif",
    "Zicclsm",
    "Ziccrse",
    "Zicntr",
    "Zicond",
    "Zicsr",
    "Zifencei",
    "Zihintntl",
    "Zihpm",
    "Zimop",
    "Zkn",
    "Zknd",
    "Zkne",
    "Zknh",
    "Zksed",
    "Zksh",
    "Zk",
    "Zkr",
    "Zks",
    "Zkt",
    "Zmmul",
    "Zve32x",
    "Zve32f",
    "Zve64x",
    "Zve64f",
    "Zve64d",
    "Zvfh",
    "Zvl32b",
    "Zvl64b",
    "Zvl128b",
    "Zvl256b",
    "Zvl512b",
    "Zvl1024b",
    "Zvl2048b",
    "Zvl4096b",
    "Zvl8192b",
    "Zvl16384b",
    "Zvl32768b",
    "Zvl65536b",
]

data_types = {
    "rd": ["Register_int", "Register_float"],
    "rt": [],
    "rs1": ["Register_int", "Register_float"],
    "rs2": ["Register_int", "Register_float"],
    "rs3": ["Register_int", "Register_float"],
    "aqrl": ["Mapping_ordering"],
    "aq": ["u8"],
    "rl": ["u8"],
    "fm": ["u8"],
    "pred": ["Mapping_fence"],
    "succ": ["Mapping_fence"],
    "rm": ["Mapping_round"],
    "funct3": ["u8"],
    "funct2": ["u8"],
    "imm20":  [],         
    "jimm20": [],         
    "imm12":  [],         
    "csr": ["Mapping_csr"],
    "imm12hi":  [],       
    "bimm12hi": [],       
    "imm12lo":  [],       
    "bimm12lo": [],       
    "shamtq": ["u8"],
    "shamtw": ["u8"],
    "shamtw4": ["u8"],
    "shamtd": ["u8"],
    "bs": ["u8"],
    "rnum": ["u8"],
    "rc": ["u8"], # ???
    "imm2": [],           
    "imm3": [],           
    "imm4": [],           
    "imm5": [],           
    "imm6": [],           
    "zimm": [],           
    "opcode": ["u8"],
    "funct7": ["u8"],
    "vd": ["Register_vec"],
    "vs3": ["Register_vec"],
    "vs1": ["Register_vec"],
    "vs2": ["Register_vec"],
    "vm": ["Mapping_vm"],
    "wd": ["u8"],
    "amoop": ["u8"],
    "nf": ["Mapping_seg"],
    "simm5": [],          
    "zimm5": [],          
    "zimm10": ["Mapping_vtypei"],
    "zimm11": ["Mapping_vtypei"],    
    "zimm6hi": [],        
    "zimm6lo": [],        
    "c_nzuimm10": [],     
    "c_uimm7lo": [],      
    "c_uimm7hi": [],      
    "c_uimm8lo": [],      
    "c_uimm8hi": [],      
    "c_uimm9lo": [],      
    "c_uimm9hi": [],      
    "c_nzimm6lo": [],     
    "c_nzimm6hi": [],     
    "c_imm6lo": [],       
    "c_imm6hi": [],       
    "c_nzimm10hi": [],    
    "c_nzimm10lo": [],    
    "c_nzimm18hi": [],    
    "c_nzimm18lo": [],    
    "c_imm12": [],        
    "c_bimm9lo": [],      
    "c_bimm9hi": [],      
    "c_nzuimm5": [],      
    "c_nzuimm6lo": [],    
    "c_nzuimm6hi": [],    
    "c_uimm8splo": [],    
    "c_uimm8sphi": [],    
    "c_uimm8sp_s": [],    
    "c_uimm10splo": [],   
    "c_uimm10sphi": [],   
    "c_uimm9splo": [],    
    "c_uimm9sphi": [],    
    "c_uimm10sp_s": [],   
    "c_uimm9sp_s": [],    
    "c_uimm2": [],        
    "c_uimm1": [],        
    "c_rlist": [],        # TODO extra special handling
    "c_spimm": [],        # TODO extra special handling
    "c_index": [],        
    "rs1_p": ["Register_int_c", "Register_float_c"],    
    "rs2_p": ["Register_int_c", "Register_float_c"],
    "rd_p": ["Register_int_c", "Register_float_c"],
    "rd_rs1_n0": ["Register_int", "Register_float"],
    "rd_rs1_p": ["Register_int_c", "Register_float_c"],
    "rd_rs1": ["Register_int", "Register_float"],
    "rd_n2": ["Register_int", "Register_float"],            
    "rd_n0": ["Register_int", "Register_float"],            
    "rs1_n0": ["Register_int", "Register_float"],           
    "c_rs2_n0": ["Register_int", "Register_float"],         
    "c_rs1_n0": ["Register_int", "Register_float"],         
    "c_rs2": ["Register_int", "Register_float"],
    "c_sreg1": ["Register_int_c", "Register_float_c"],
    "c_sreg2": ["Register_int_c", "Register_float_c"],
    "mop_r_t_30": [],
    "mop_r_t_27_26": [],
    "mop_r_t_21_20": [],
    "mop_rr_t_30": [],
    "mop_rr_t_27_26": [],
}

special_tests = {
    "rd_rs1_n0": [1, 2],
    "rd_n2": [1, 3],
    "c_nzimm6lo": [0, 0],
    "c_nzimm6hi": [0, 0],
    "rd_n0": [1, 2],
    "rs1_n0": [1, 2],
    "c_rs2_n0": [1, 2],
    "c_rs1_n0": [1, 2],
    "aqrl": [1, 2],
    "csr": [1, 2],
    "nf": [1, 2],
    "vd": [1, 0],
    "vs3": [1, 0],
    "vs1": [1, 0],
    "vs2": [1, 0],
}

unsigned_list = [
    "imm20",
    "zimm",
    "zimm5",
    "zimm6hi",
    "zimm6lo",
    "c_nzuimm10",
    "c_uimm7lo",
    "c_uimm7hi",
    "mop_r_t_30",
    "mop_r_t_27_26",
    "mop_r_t_21_20",
    "mop_rr_t_30",
    "mop_rr_t_27_26",
]

imm_mappings = {
    "imm20":  [[31, 12]],         
    "jimm20": [[20, 20], [10, 1], [11, 11], [19, 12]],         
    "imm12":  [[11, 0]],
    "imm12hi":  [[11, 5]],
    "bimm12hi": [[12, 12], [10, 5]],
    "imm12lo":  [[4, 0]],
    "bimm12lo": [[4, 1], [11, 11]],
    "imm2": [[1, 0]],   # unused
    "imm3": [[2, 0]],   # unused
    "imm4": [[3, 0]],   # unused
    "imm5": [[4, 0]],   # unused
    "imm6": [[5, 0]],   # unused
    "zimm": [[4, 0]],   
    "simm5": [[4, 0]],  
    "zimm5": [[4, 0]],  # Care, since values are mapped in processor: TODO check for how disassembly works
    "zimm6hi": [[5, 5]],
    "zimm6lo": [[4, 0]],        
    "c_nzuimm10": [[5, 4], [9, 6], [2, 2], [3, 3]], # TODO zero illegal
    "c_uimm7lo": [[2, 2], [6, 6]],      
    "c_uimm7hi": [[5, 3]],      
    "c_uimm8lo": [[7, 6]],      
    "c_uimm8hi": [[5, 3]],      
    "c_uimm9lo": [[7, 6]],                  # unused
    "c_uimm9hi": [[5, 5], [4, 4], [8, 8]],  # unused
    "c_nzimm6lo": [[4, 0]], 
    "c_nzimm6hi": [[5, 5]], 
    "c_imm6lo": [[4, 0]],       
    "c_imm6hi": [[5, 5]],       
    "c_nzimm10hi": [[9, 9]],    
    "c_nzimm10lo": [[4, 4], [6, 6], [8, 7], [5, 5]],    
    "c_nzimm18hi": [[17, 17]],    
    "c_nzimm18lo": [[16, 12]],    
    "c_imm12": [[11, 11], [4, 4], [9, 8], [10, 10], [6, 6], [7, 7], [3, 1], [5, 5]],        
    "c_bimm9lo": [[7, 6], [2, 1], [5, 5]],      
    "c_bimm9hi": [[8, 8], [4, 3]],      
    "c_nzuimm5": [],      # unused
    "c_nzuimm6lo": [[4, 0]],    
    "c_nzuimm6hi": [[5, 5]],    
    "c_uimm8splo": [[4, 2], [7, 6]],    
    "c_uimm8sphi": [[5, 5]],    
    "c_uimm8sp_s": [[5, 2], [7, 6]],    
    "c_uimm10splo": [],   # unused
    "c_uimm10sphi": [],   # unused
    "c_uimm9splo": [[4, 3], [8, 6]],    
    "c_uimm9sphi": [[5, 5]],    
    "c_uimm10sp_s": [],   # unused
    "c_uimm9sp_s": [[5, 3], [8, 6]],    
    "c_uimm2": [[0, 0], [1, 1]],        
    "c_uimm1": [[1, 1]],    # TODO special case        
    "c_spimm": [[5, 4]],    # TODO special case        
    "c_index": [[7, 0]],    # TODO must be >= 32        
    "mop_r_t_30": [[4, 4]],
    "mop_r_t_27_26": [[3, 2]],
    "mop_r_t_21_20": [[1, 0]],
    "mop_rr_t_30": [[2, 2]],
    "mop_rr_t_27_26": [[1, 0]],
}

Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]
Register_int_c = [
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
]
Register_float = [
    "ft0",
    "ft1",
    "ft2",
    "ft3",
    "ft4",
    "ft5",
    "ft6",
    "ft7",
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
    "fa6",
    "fa7",
    "fs2",
    "fs3",
    "fs4",
    "fs5",
    "fs6",
    "fs7",
    "fs8",
    "fs9",
    "fs10",
    "fs11",
    "ft8",
    "ft9",
    "ft10",
    "ft11",
]
Register_float_c = [
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
]
Register_vec = [
    "v0",
    "v1",
    "v2",
    "v3",
    "v4",
    "v5",
    "v6",
    "v7",
    "v8",
    "v9",
    "v10",
    "v11",
    "v12",
    "v13",
    "v14",
    "v15",
    "v16",
    "v17",
    "v18",
    "v19",
    "v20",
    "v21",
    "v22",
    "v23",
    "v24",
    "v25",
    "v26",
    "v27",
    "v28",
    "v29",
    "v30",
    "v31",
]

Mapping_vm = [
    ", v0.t",
    "",
]

Mapping_fence = [
    "unknown",
    "w",
    "r",
    "rw",
    "o",
    "ow",
    "or",
    "orw",
    "i",
    "iw",
    "ir",
    "irw",
    "io",
    "iow",
    "ior",
    "iorw",
]

Mapping_round = [
    "rne",
    "rtz",
    "rdn",
    "rup",
    "rmm",
    "unknown",
    "unknown",
    "dyn",
]
Mapping_ordering = ["", ".rl", ".aq", ".aqrl"]


Mapping_vtypei = {
hex(0): "e8, m1, tu, mu",
hex(1): "e8, m2, tu, mu",
hex(2): "e8, m4, tu, mu",
hex(3): "e8, m8, tu, mu",
hex(5): "e8, mf8, tu, mu",
hex(6): "e8, mf4, tu, mu",
hex(7): "e8, mf2, tu, mu",
hex(8): "e16, m1, tu, mu",
hex(9): "e16, m2, tu, mu",
hex(10): "e16, m4, tu, mu",
hex(11): "e16, m8, tu, mu",
hex(13): "e16, mf8, tu, mu",
hex(14): "e16, mf4, tu, mu",
hex(15): "e16, mf2, tu, mu",
hex(16): "e32, m1, tu, mu",
hex(17): "e32, m2, tu, mu",
hex(18): "e32, m4, tu, mu",
hex(19): "e32, m8, tu, mu",
hex(21): "e32, mf8, tu, mu",
hex(22): "e32, mf4, tu, mu",
hex(23): "e32, mf2, tu, mu",
hex(24): "e64, m1, tu, mu",
hex(25): "e64, m2, tu, mu",
hex(26): "e64, m4, tu, mu",
hex(27): "e64, m8, tu, mu",
hex(29): "e64, mf8, tu, mu",
hex(30): "e64, mf4, tu, mu",
hex(31): "e64, mf2, tu, mu",
hex(64): "e8, m1, ta, mu",
hex(65): "e8, m2, ta, mu",
hex(66): "e8, m4, ta, mu",
hex(67): "e8, m8, ta, mu",
hex(69): "e8, mf8, ta, mu",
hex(70): "e8, mf4, ta, mu",
hex(71): "e8, mf2, ta, mu",
hex(72): "e16, m1, ta, mu",
hex(73): "e16, m2, ta, mu",
hex(74): "e16, m4, ta, mu",
hex(75): "e16, m8, ta, mu",
hex(77): "e16, mf8, ta, mu",
hex(78): "e16, mf4, ta, mu",
hex(79): "e16, mf2, ta, mu",
hex(80): "e32, m1, ta, mu",
hex(81): "e32, m2, ta, mu",
hex(82): "e32, m4, ta, mu",
hex(83): "e32, m8, ta, mu",
hex(85): "e32, mf8, ta, mu",
hex(86): "e32, mf4, ta, mu",
hex(87): "e32, mf2, ta, mu",
hex(88): "e64, m1, ta, mu",
hex(89): "e64, m2, ta, mu",
hex(90): "e64, m4, ta, mu",
hex(91): "e64, m8, ta, mu",
hex(93): "e64, mf8, ta, mu",
hex(94): "e64, mf4, ta, mu",
hex(95): "e64, mf2, ta, mu",
hex(128): "e8, m1, tu, ma",
hex(129): "e8, m2, tu, ma",
hex(130): "e8, m4, tu, ma",
hex(131): "e8, m8, tu, ma",
hex(133): "e8, mf8, tu, ma",
hex(134): "e8, mf4, tu, ma",
hex(135): "e8, mf2, tu, ma",
hex(136): "e16, m1, tu, ma",
hex(137): "e16, m2, tu, ma",
hex(138): "e16, m4, tu, ma",
hex(139): "e16, m8, tu, ma",
hex(141): "e16, mf8, tu, ma",
hex(142): "e16, mf4, tu, ma",
hex(143): "e16, mf2, tu, ma",
hex(144): "e32, m1, tu, ma",
hex(145): "e32, m2, tu, ma",
hex(146): "e32, m4, tu, ma",
hex(147): "e32, m8, tu, ma",
hex(149): "e32, mf8, tu, ma",
hex(150): "e32, mf4, tu, ma",
hex(151): "e32, mf2, tu, ma",
hex(152): "e64, m1, tu, ma",
hex(153): "e64, m2, tu, ma",
hex(154): "e64, m4, tu, ma",
hex(155): "e64, m8, tu, ma",
hex(157): "e64, mf8, tu, ma",
hex(158): "e64, mf4, tu, ma",
hex(159): "e64, mf2, tu, ma",
hex(192): "e8, m1, ta, ma",
hex(193): "e8, m2, ta, ma",
hex(194): "e8, m4, ta, ma",
hex(195): "e8, m8, ta, ma",
hex(197): "e8, mf8, ta, ma",
hex(198): "e8, mf4, ta, ma",
hex(199): "e8, mf2, ta, ma",
hex(200): "e16, m1, ta, ma",
hex(201): "e16, m2, ta, ma",
hex(202): "e16, m4, ta, ma",
hex(203): "e16, m8, ta, ma",
hex(205): "e16, mf8, ta, ma",
hex(206): "e16, mf4, ta, ma",
hex(207): "e16, mf2, ta, ma",
hex(208): "e32, m1, ta, ma",
hex(209): "e32, m2, ta, ma",
hex(210): "e32, m4, ta, ma",
hex(211): "e32, m8, ta, ma",
hex(213): "e32, mf8, ta, ma",
hex(214): "e32, mf4, ta, ma",
hex(215): "e32, mf2, ta, ma",
hex(216): "e64, m1, ta, ma",
hex(217): "e64, m2, ta, ma",
hex(218): "e64, m4, ta, ma",
hex(219): "e64, m8, ta, ma",
hex(221): "e64, mf8, ta, ma",
hex(222): "e64, mf4, ta, ma",
hex(223): "e64, mf2, ta, ma"
}

Mapping_csr = {}
for csr_val in csrs:
    Mapping_csr[hex(csr_val[0])] = csr_val[1]
for csr_val in csrs32:
    Mapping_csr[hex(csr_val[0])] = csr_val[1]

Mapping_seg = [
    "",
    "seg2",
    "seg3",
    "seg4",
    "seg5",
    "seg6",
    "seg7",
    "seg8",
]

Mappings = [
        {"name": "Register_int", "use": False, "pointer": Register_int},
        {"name": "Mapping_int_c", "use": False, "pointer": Register_int_c},
        {"name": "Register_float", "use": False, "pointer": Register_float},
        {"name": "Register_float_c", "use": False, "pointer": Register_float_c},
        {"name": "Register_vec", "use": False, "pointer": Register_vec},
        {"name": "Mapping_vm", "use": False, "pointer": Mapping_vm},
        {"name": "Mapping_fence", "use": False, "pointer": Mapping_fence},
        {"name": "Mapping_vtypei", "use": False, "pointer": Mapping_vtypei},
        {"name": "Mapping_round", "use": False, "pointer": Mapping_round},
        {"name": "Mapping_ordering", "use": False, "pointer": Mapping_ordering},
        {"name": "Mapping_csr", "use": False, "pointer": Mapping_csr},
        {"name": "Mapping_seg", "use": False, "pointer": Mapping_seg},
    ]
